name: Publish

on:
  push:
    tags:
      - "v*-cv*" # v0.9.7-cv1-alpha


env:
  TAG_VERSION: ${{ github.ref_name }}
  AWS_ROLE_CREDENTIAL_SIT: arn:aws:iam::823450791383:role/campaign-sit-GitOIDC-1HJ8PQ74FSA-StaticWebHostRole-VY4Q6Q27S2TZ
  AWS_ROLE_CREDENTIAL_UAT: arn:aws:iam::823450791383:role/campaign-uat-GitOIDC-NSE3YJF14ZV-StaticWebHostRole-JDI74L6N0D4P
  AWS_ROLE_CREDENTIAL_STG: arn:aws:iam::XXXXXXXXXXXX:role/<ROLE NAME>
  AWS_ROLE_CREDENTIAL_PROD: arn:aws:iam::XXXXXXXXXXXX:role/<ROLE NAME>

  # for new architecture
  BUCKET_ASSETS_SIT: campaign-sit-assets
  BUCKET_ASSETS_UAT: campaign-uat-assets
  BUCKET_ASSETS_STG: campaign-stg-assets
  CLOUDFRONT_DISTRIBUTION_ID_NONPROD: EVUJUH2YYLJAW # used of sit and uat
  CLOUDFRONT_DISTRIBUTION_ID_PROD: XXXXX # used of stg and prod

jobs:
  # |------------------------------------|
  # | BRANCH CHECK                       |
  # |------------------------------------|

  branch_check:
    name: Branch Check and Get Tag
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    outputs:
      branch: ${{ steps.get_branch.outputs.branch }}
      tag: ${{ steps.get_tag.outputs.tag }}
    steps:
      - name: Get current branch
        id: get_branch
        run: |
          raw="${{ github.event.base_ref }}"
          branch="${raw#refs/heads/}"
          echo "::set-output name=branch::$branch"
          echo "Branch is $branch."
        
      - name: Get current tag
        id: get_tag
        run: |
          echo "tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

  # |------------------------------------|
  # | SIT                                |
  # |------------------------------------|

  # push to old architecture
  push_to_sit:
    name: Release to sit
    needs: [branch_check]
    if: ${{ needs.branch_check.outputs.branch == 'sit' }} # only run if branch is SIT
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ env.AWS_ROLE_CREDENTIAL_SIT }}
          role-session-name: OIDCsession
      
      - name: Update to s3
        run: |
          export AP=$(node ./scripts/split_ap.js ${{ needs.branch_check.outputs.tag }})
          export CV=$(node ./scripts/split_cv.js ${{ needs.branch_check.outputs.tag }})

          jq --arg CV "${CV}" '.contentVersion = $CV' ./MAE/ENV/setting/AP/masterConfig.json > ./MAE/ENV/setting/AP/masterConfigNew.json
          mv ./MAE/ENV/setting/AP/masterConfigNew.json ./MAE/ENV/setting/AP/masterConfig.json
          
          for path in ./MAE/ENV/*; do \
            if [[ $path == "./MAE/ENV/setting" ]]; then \
              echo "Master $path"; \
              aws s3 sync $path/AP/. s3://${{ env.BUCKET_ASSETS_SIT }}/MAE/SIT/setting/$AP --delete --cache-control no-store; \
              continue; \
            fi; \
              echo "Others $path"; \
              export CT=$(node ./scripts/split_ct.js $path); \
              aws s3 sync $path/AP/CV/. s3://${{ env.BUCKET_ASSETS_SIT }}/MAE/SIT/$CT/$AP/$CV --delete; \
          done

      - name: delete cache
        run: |
          export AP=$(node ./scripts/split_ap.js ${{ needs.branch_check.outputs.tag }})
          export CV=$(node ./scripts/split_cv.js ${{ needs.branch_check.outputs.tag }})

          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_NONPROD }} \
            --paths "/MAE/SIT/$AP/$CV/*"

  
  # |------------------------------------|
  # | UAT                                |
  # |------------------------------------|

  # push to old architecture
  push_to_uat:
    name: Release to uat
    needs: [branch_check]
    if: ${{ needs.branch_check.outputs.branch == 'UAT' }} # only run if branch is UAT
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ env.AWS_ROLE_CREDENTIAL_UAT }}

      - name: Update to s3
        run: |
          aws s3 sync ./MAE/ENV/. s3://${{ env.BUCKET_ASSETS_UAT }}/MAE/UAT --exclude "*" --include "*/dynamo.json" --cache-control no-store
          aws s3 sync ./MAE/ENV/. s3://${{ env.BUCKET_ASSETS_UAT }}/MAE/UAT --delete

      - name: delete cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_NONPROD }} \
            --paths "/MAE/UAT/*"

  # |------------------------------------|
  # | STG                                |
  # |------------------------------------|

  # push to old architecture
  push_to_stg:
    name: Release to stg
    needs: [branch_check]
    if: ${{ needs.branch_check.outputs.branch == 'staging_env' }} # only run if branch is staging_env
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: write
      id-token: write
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@master
        with:
          aws-region: ap-southeast-1
          role-to-assume: ${{ env.AWS_ROLE_CREDENTIAL_STG }}

      - name: Update to s3
        run: |
          aws s3 sync ./MAE/ENV/. s3://${{ env.BUCKET_ASSETS_STG }}/MAE/staging --exclude "*" --include "*/dynamo.json" --cache-control no-store
          aws s3 sync ./MAE/ENV/. s3://${{ env.BUCKET_ASSETS_STG }}/MAE/staging --delete

      - name: delete cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID_PROD }} \
            --paths "/MAE/staging/*"
  
